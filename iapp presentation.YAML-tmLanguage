# [PackageDev] target_format: plist, ext: tmLanguage
---
name: F5 iApp Presentation
scopeName: source.iapp.presentation
fileTypes: [iappp, iapp_pres, iapp_presentation]
uuid: b6965f69-91d4-4b71-a789-f5531cd568a4
## first, match the global stuff
#firstLineMatch: '^include\\s+.?/Common/f5.apl_common.?'
#foldingEndMarker: ^\s*\}
#foldingStartMarker: \{\s*$
patterns:
- captures:
    '1': {name: keyword.control.iappp}
    '2': {name: support.class.iappp}
  match: ^\s*(include)\s+("?[A-Za-z_][A-Za-z0-9_-]*)\b
- captures:
    '1': {name: keyword.control.iappp}
    '2': {name: entity.name.section.iappp}
  match: ^\s*(section)\s+("?[A-Za-z_][A-Za-z0-9_-]*)\b
- captures:
    '1': {name: keyword.other.iappp}
  match: ^\s*(text)\b
- captures:
    '1': {name: keyword.control.iappp}
    '2': {name: entity.name.tag.iappp}
  match: ^\s*(choice|row|table|editchoice|multichoice|message|optional|string)\s+([A-Za-z_][A-Za-z0-9_-]*)\b
- captures:
    '0': {name: comment.iappp}
  match: ^\s*#
- {include: '#escape'}
- {include: '#variable'}
- begin: '"'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.iappp}
  end: '"'
  endCaptures:
    '0': {name: punctuation.definition.string.end.iappp}
  name: string.quoted.double.iappp
  patterns:
  - {include: '#escape'}
  - {include: '#variable'}
  - {include: '#embedded'}
repository:
  bare-string:
    begin: (?:^|(?<=\s))"
    comment: matches a single quote-enclosed word without scoping
    end: '"([^\s\]]*)'
    endCaptures:
      '1': {name: invalid.illegal.iappp}
    patterns:
    - {include: '#escape'}
    - {include: '#variable'}
  braces:
    begin: (?:^|(?<=\s))\{
    comment: matches a single brace-enclosed word
    end: \}([^\s\]]*)
    endCaptures:
      '1': {name: invalid.illegal.iappp}
    patterns:
    - {match: '\\[{}\n]', name: constant.character.escape.iappp}
    - {include: '#inner-braces'}
  embedded:
    begin: \[
    beginCaptures:
      '0': {name: punctuation.section.embedded.begin.iappp}
    end: \]
    endCaptures:
      '0': {name: punctuation.section.embedded.end.iappp}
    name: source.iapp.embedded
    patterns:
    - {include: source.iapp}
  escape: {match: '\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)', name: constant.character.escape.iappp}
  inner-braces:
    begin: \{
    comment: matches a nested brace in a brace-enclosed word
    end: \}
    patterns:
    - {match: '\\[{}\n]', name: constant.character.escape.iappp}
    - {include: '#inner-braces'}
  regexp:
    begin: (?=\S)(?![\n;\]])
    comment: matches a single word, named as a regexp, then swallows the rest of the
      command
    end: (?=[\n;\]])
    patterns:
    - begin: (?=[^ \t\n;])
      end: (?=[ \t\n;])
      name: string.regexp.iappp
      patterns:
      - {include: '#braces'}
      - {include: '#bare-string'}
      - {include: '#escape'}
      - {include: '#variable'}
    - begin: '[ \t]'
      comment: swallow the rest of the command
      end: (?=[\n;\]])
      patterns:
      - {include: '#variable'}
      - {include: '#embedded'}
      - {include: '#escape'}
      - {include: '#braces'}
      - {include: '#string'}
  string:
    applyEndPatternLast: 1
    begin: (?:^|(?<=\s))(?=")
    comment: matches a single quote-enclosed word with scoping
    end: ''
    name: string.quoted.double.iappp
    patterns:
    - {include: '#bare-string'}
  variable:
    captures:
      '1': {name: punctuation.definition.variable.iappp}
    match: (\$)((?:[a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})
    name: variable.other.iappp
