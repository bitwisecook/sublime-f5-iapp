# [PackageDev] target_format: plist, ext: tmLanguage
---
name: F5 iApp Presentation
scopeName: source.iapp.presentation
fileTypes: [iappp, iapp_pres, iapp_presentation]
uuid: b6965f69-91d4-4b71-a789-f5531cd568a4


# General notes: The highlighting seems to be triggered mostly by the first word in the name. keyword, entitiy, storage (for things we want to store and highlight later like variables and type definitions.)
# Sublime text doesn't appear to have any documentation on this functionality but since the syntax definition functionality comes from textmate perhaps it is better documented there. http://manual.macromates.com/en/language_grammars#language_grammars
#firstLineMatch: '^include\\s+.?/Common/f5.apl_common.?' # No firstLineMatch for the presentation section.
foldingStartMarker: \{\s*$
foldingEndMarker: ^\s*\}
#keyEquivalent: ^~J # Don't know if we should/could come up with an equivalent for these.

# The initial patterns section is what determines highlighting. Anything defined in the repository section but not included here (directly or indirectly) will not result in highlighting.
# However that is all this section does, highlighting. In order to have the grammar definition perform a bit of a syntax checking role (For example in this one a section object cannot be embeded in any other object only at the root) 
# scopes need to be defined. Scopes are defined in the repository section below.
patterns:
- captures:
    '1': {name: keyword.control.iappp}
    '2': {name: support.class.iappp}
  match: ^\s*(include)\s+("?[A-Za-z_][A-Za-z0-9_-]*)\b
- include: '#top-level-objects'

# unmatched but (probably) valid stuff
- include: '#unmatched'

# everything else should remain unmatched
- include: '#illegal'

# This is where you define scopes. I.E. where does one block of code start and end. Where within that scope are other scopes valid. For example below a choice object starts with choice <name>. After that it may 
# contain a 'default' scope, a 'display' scope a 'tcl-databindings' scope or a choice body. The tcl-databindings scope is only valid within a choice type (choice, editchoice, multichoice.)
repository:
  
  # Globally invalid/incorrect stuff.
  # Attempting to get sublime text to highlight mismatched values and incorrect syntaxes.
  # Neither of these do anythin and I have no idea why. It may have something to do with me not understanding them. ^_^
  unmatched:
    # unmatched list entries (e.g. before "{") and commas before newlines
    match: ^ *- |,(?= *$| +#)

  illegal:
    name: invalid.illegal.unrecognized.iappp
    match: '[^\s}]'
  
  # Strings and their ilk
  all-strings:
    comment: All string types. Bare strings, double quoted strings, brace quoted strings, etc.
    patterns:
      - include: '#double-strings'
      - include: '#braces'
      - include: '#brace-lists'
      - include: '#bare-strings'
      - include: '#strings'
      - include: '#comments'
  brace-lists:
    comment: Matches a brace defined list. In implementation or TCL this technically wouldn't be a string type but in APL it can only contain strings.
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.brace-list.begin.iappp}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.brace-list.end.iappp}
    patterns:
      - include: '#all-strings'
  double-strings:
    comment: Matches double quoted strings
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.iappp}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.iappp}
    name: string.quoted.double.iappp
    patterns:
      - include: '#escapes'
      - include: '#variables'
      - include: '#embeddeds'
      - include: '#all-strings'

  comments:
    comment: Matches TCL style comments and empty TCL style 'block comment.' Quotes intentional.
    patterns:
    - name: meta.comment.standalone
      match: \s*((#).*$\n?)
      captures:
        '1': {name: comment.line.pound.iappi}
        '2': {name: punctuation.definition.comment.iappi}
        # Commenting out because I'm pretty sure APL doesn't allow if so the if 0 syntax won't help.
    # - name: comment.block.empty.iappi
    #   comment: Completely empty block comments won't match the in-line syntax below due to the begin/end syntax. (I think they won't)
    #   match: \s*(if\s+0\s+\{\})
    #   captures:
    #     '1': {name: punctuation.definition.comment.iappi}
    - include: '#comments-inline'

  comments-inline:
    comment: Matches TCL style comments and TCL style 'block comment.' Quotes intentional.
    patterns:
      # Commenting out because I'm pretty sure APL doesn't allow if so the if 0 syntax won't help.
    # - name: comment.block.iappi
    #   begin: \s*if\s+0\s+\{
    #   end: \}
    #   captures:
    #     '0': {name: punctuation.definition.comment.iappi}
    - match: .+((;\s*#).*$\n?) #This might not be valid with the semi-colon.
      captures:
        '1': {name: comment.line.semi-pound.iappi}
        '2': {name: punctuation.definition.comment.iappi}
  
  escapes: {match: '\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)', name: constant.character.escape.iappp}

  regexps:
    begin: (?=\S)(?![\n;\]])
    comment: matches a single word, named as a regexp, then swallows the rest of the
      command
    end: (?=[\n;\]])
    patterns:
    - begin: (?=[^ \t\n;])
      end: (?=[ \t\n;])
      name: string.regexp.iappp
      patterns:
      - {include: '#braces'}
      - {include: '#bare-strings'}
      - {include: '#escapes'}
      - {include: '#variables'}
    - begin: '[ \t]'
      comment: swallow the rest of the command
      end: (?=[\n;\]])
      patterns:
      - {include: '#variables'}
      - {include: '#embeddeds'}
      - {include: '#escapes'}
      - {include: '#braces'}
      - {include: '#strings'}
 
  embeddeds:
    begin: \[
    comment: Matches an embeded command
    beginCaptures:
      '0': {name: punctuation.definition.embedded.begin.iappp}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.embedded.end.iappp}
    name: source.iapp.embedded
    patterns:
      - include: '#embeddeds'
      - include: '#source.iapp' # does this line do anything?

  # This does not work
  text-definition-variable:
    patterns:
      - name: variable.language.iappp
        match: (^\s*([A-Za-z_][A-Za-z0-9_-]*))(?=\s)
        captures:
          # '0': {name: variable.language.iappp}
          '0': {name: keyord.control.iappp}

  # Defines the text definition element which is typically found at the bottom of an APL definition.
  text-definition:
    begin: ^\s*(text)\s+(?=\{)
    beginCaptures:
      # '0': {name: punctuation.text.start.iappp} # perhaps?
      '0': {name: keyword.other.text.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.text.end.iappp}
      # '0': {name: keyword.text.end.iappp}
    patterns:
      - name: meta.text.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#text-definition-variable'
          - include: '#comments'
          - include: '#all-strings'


  ######## Properties #########

  defaults:
    comment: The default value presented if no value was previously entered. This can be a string or a Tcl expression.
    patterns:
    - match: (default)\s+("[A-Za-z_][A-Za-z0-9_-]*")
      captures:
        '1': {name: keyword.default.iappp}
        '2': {name: storage.type.value}

  displays:
    comment: Gives a hint to the renderer about how this element should be displayed.
    patterns:
    - match: (display)\s+("(?:small|medium|large|xlarge|xxlarge)")
      captures:
        '1': {name: keyword.display.iappp}
        '2': {name: storage.type.value}

  validators:
    comment: Tells the renderer what type of data is valid. If input is not valid, the user is returned to the template screen that has a red error message next to the field in question.
    patterns:
    - match: (validator)\s+("(?:FQDN|IpOrFqdn|IpAddress|NonNegativeNumber|Number|PortNumber)")
      captures:
        '1': {name: keyword.validator.iappp}
        '2': {name: storage.type.value}

  requireds:
    comment: Makes an object required. Limited usage
    patterns:
    - match: (required)\s*
      captures:
        '1': {name: keyword.required.iappp}

  # Defines the tcl data binding section which can be used to populate list type objects such as choices
  tcl-databindings:
    begin: \b(tcl)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.tcl.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.tcl.end.iappp}
    patterns:
      - name: meta.tcl.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#all-strings'
          - include: '#embeddeds'
          - include: 'source.iapp_impl' # You can include a separate language by specifying it's scope name. Note the missing initial pound.

  strings:
    comment: Strings are single text boxes which take user input.
    begin: (?<=(?:^|\s|\"|\}))(string)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*
    beginCaptures:
      '1': {name: keyword.control.string.iappp}
      '2': {name: storage.type.string.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=\n)) #Ends when it is followed by another element or a newline
    patterns:
      - include: '#validators'
      - include: '#requireds'
      - include: '#displays'
      - include: '#defaults'

  passwords:
    comment: Passwords are like strings except instead of displaying the typed text they obfuscate it. Some systems like the built in logging do their best to not log the contents either.
    begin: (?<=(?:^|\s|\"|\}))(password)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*
    beginCaptures:
      '1': {name: keyword.control.string.iappp}
      '2': {name: storage.type.string.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=\n)) #Ends when it is followed by another element or a newline
    patterns:
      - include: '#requireds'
      - include: '#displays'
  
  # So really choice is the word choice, some spaces, the name of the choice object, Optionally some space and a default object, optionally some space and a display object, optionally some space and a definition object {"yes","no"}, optionally a tcl databinding object.
  choices:
    comment: Choices produce a pull down list of selectable options.
    begin: (?<=(?:^|\s|\"|\}))(choice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.choice.iappp}
      '2': {name: storage.type.choice.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=}))
    endCaptures:
      '0': {name: storage.section.choice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.choice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
          - include: '#double-strings'

  editchoices:
    comment: Editchoices are like choices except the user can also simply type a choice instead of choosing from those available.
    begin: (?<=(?:^|\s|\"|\}))(editchoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.editchoice.iappp}
      '2': {name: storage.type.editchoice.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=}))
    endCaptures:
      '0': {name: storage.section.editchoice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.editchoice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
          - include: '#double-strings'

  multichoices:
    comment: Multichoices present two lists of options and allow the user to move items between the lists.
    begin: (?<=(?:^|\s|\"|\}))(multichoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.multichoice.iappp}
      '2': {name: storage.type.multichoice.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=}))
    endCaptures:
      '0': {name: storage.section.multichoice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.multichoice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
          - include: '#double-strings'

  choice-types:
    patterns:
      - include: '#choices'
      - include: '#editchoices'
      - include: '#multichoices'

  tables:
    comment: Tables group other objects together in a way that allows users to add additional lines. They are like rows which can be extended.
    begin: \b(table)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.table.iappp}
      '2': {name: storage.type.table.iappp}
      # '3': {name: storage.modifier.iappp}
      # '4': {name: storage.modifier.iappp}
    end: '}'
    endCaptures:
      # '0': {name: storage.section.table.end.iappp} # Should be punctuation. Using storage to cause highlighting.
      '0': {name: punctuation.table.end.iappp}
    patterns:
      - name: meta.table.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#strings'
          - include: '#passwords'
          - include: '#choice-types'
          # Cannot include rows or messages

  # I'm not sure if rows will work with choice types or not.
  rows:
    comment: Rows cause objects to be displayed side by side instead of on top of one another.
    begin: \b(row)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.table.iappp}
      '2': {name: storage.type.table.iappp}
      # '3': {name: storage.modifier.iappp}
      # '4': {name: storage.modifier.iappp}
    end: '}'
    endCaptures:
      # '0': {name: storage.section.table.end.iappp} # Should be punctuation. Using storage to cause highlighting.
      '0': {name: punctuation.table.end.iappp}
    patterns:
      - name: meta.table.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#strings'
          - include: '#passwords'
          - include: '#choice-types'
          # Cannot include rows or messages

  messages:
    comment: Messages display un-editable text to the user.
    begin: (?<=(?:^|\s|\"|\}))(message)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*
    beginCaptures:
      '1': {name: keyword.control.message.iappp}
      '2': {name: storage.type.message.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=\n)) #Ends when it is followed by another element or a newline
    patterns:
      - include: '#double-strings'

  defines:
    comment: Comments allow users to create their own types.
    begin: (?<=(?:^|\s|\"|\}))(define)\s+(?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional))
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.define.iappp}
      '2': {name: storage.type.define.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?<=}))
    patterns:
      - include: '#strings'
      - include: '#passwords'
      - include: '#choices'
      - include: '#editchoices'
      - include: '#multichoices'
      - include: '#tables'
      - include: '#rows'
      - include: '#messages'
      - include: '#optionals'

  top-level-objects:
    patterns:
      - include: '#comments'
      - include: '#top-optionals'
      - include: '#sections'
      - include: '#text-definition'

  optionals:
    comment: Optionals cause items to not be displayed unless the defined criteria are met. This defines the optional element except when it's a top level object. I.E. when it's contained within a section (or something else which is contained within a section.)
    # begin: \b(optional)\s+(\(.*\))\s+(?=\{)
    begin: \b(optional)\s+\( # Optionals don't have a name and their condition can be spread across multiple lines.
    beginCaptures:
      '1': {name: keyword.control.section.iappp}
      # '2': {name: storage.type.section.iappp}
    # end: '}'
    end: ((?=(section|optional|text|proc))|(?<=})) # is Proc appropriate here?
    endCaptures:
      '0': {name: punctuation.section.end.iappp}
    patterns:
      - name: meta.section.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#strings'
          - include: '#passwords'
          - include: '#choices'
          - include: '#editchoices'
          - include: '#multichoices'
          - include: '#tables'
          - include: '#rows'
          - include: '#messages'
          - include: '#optionals'
          - include: '#defines'

  sections:
    comment: Sections group other elements together. They are valid only as top level items or within an optional definition if it is also at the top level. They cannot be nested inside of any other element including themselves. Almost all other elements must be nested within a section.
    begin: \b(section)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.section.iappp}
      '2': {name: storage.type.section.iappp}
    # end: '}'
    end: ((?=(section|optional|text|proc))|(?<=})) # is Proc appropriate here?
    endCaptures:
      '0': {name: punctuation.section.end.iappp}
    patterns:
      - name: meta.section.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#strings'
          - include: '#passwords'
          - include: '#choices'
          - include: '#editchoices'
          - include: '#multichoices'
          - include: '#tables'
          - include: '#rows'
          - include: '#messages'
          - include: '#optionals'
          - include: '#defines'
          # section
          # This one doesn't need to be defined since they are just going to be matched in the first patterns section.
          # include
          # text

  top-optionals:
    comment: Optionals cause items to not be displayed unless the defined criteria are met. This defines the optional element when it's a top level object. I.E. when it's wrapped around a section
    begin: \b(optional)\s+(\(.*\))\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.optional.iappp}
      '2': {name: storage.type.optional.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.optional.end.iappp}
    patterns:
      - name: meta.optional.body.iappp
        begin: '{'
        end: (?=})
        patterns:
          - include: '#comments'
          - include: '#sections'