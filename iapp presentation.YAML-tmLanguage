# [PackageDev] target_format: plist, ext: tmLanguage
---
name: F5 iApp Presentation
scopeName: source.f5.iapp.presentation
fileTypes: [iappp, iapp_pres, iapp_presentation]
uuid: b6965f69-91d4-4b71-a789-f5531cd568a4


# General notes: The highlighting seems to be triggered mostly by the first word in the name. keyword, entitiy, storage (for things we want to store and highlight later like variables and type definitions.)
# Sublime text doesn't appear to have any documentation on this functionality but since the syntax definition functionality comes from textmate perhaps it is better documented there. http://manual.macromates.com/en/language_grammars#language_grammars
#firstLineMatch: '^include\\s+.?/Common/f5.apl_common.?' # No firstLineMatch for the presentation section. This will only work if I add a combined syntax.
foldingStartMarker: \{\s*$
foldingEndMarker: ^\s*\}

#keyEquivalent: ^~J # Don't know if we should/could come up with an equivalent for these.

# The initial patterns section is what determines highlighting. Anything defined in the repository section but not included here (directly or indirectly) will not result in highlighting.
# However that is all this section does, highlighting. In order to have the grammar definition perform a bit of a syntax checking role (For example in this one a section object cannot be embeded in any other object only at the root) 
# scopes need to be defined. Scopes are defined in the repository section below.
patterns:
- include: '#comments'
- include: '#sections'
- include: '#optionals'
- include: '#text-definitions'
# everything else should remain unmatched
- include: '#illegals'

# This is where you define scopes. I.E. where does one block of code start and end. Where within that scope are other scopes valid. For example below a choice object starts with choice <name>. After that it may 
# contain a 'default' scope, a 'display' scope a 'tcl-databindings' scope or a choice body. The tcl-databindings scope is only valid within a choice type (choice, editchoice, multichoice.)
repository:

################  GLOBAL ELEMENTS  ################
# Global elements are things like strings and comments which are not APL specific. Any APL specific objects are defined in the APL ELEMENTS section below.

  comments:
    comment: Matches TCL style comments and empty TCL style 'block comment.' Quotes intentional.
    patterns:
    - name: meta.comment.standalone
      match: \s*((#).*$\n?)
      captures:
        '1': {name: comment.line.pound.iappi}
        '2': {name: punctuation.definition.comment.iappi}
        # Commenting out because I'm pretty sure APL doesn't allow if so the if 0 syntax won't help.
    # - name: comment.block.empty.iappi
    #   comment: Completely empty block comments won't match the in-line syntax below due to the begin/end syntax. (I think they won't)
    #   match: \s*(if\s+0\s+\{\})
    #   captures:
    #     '1': {name: punctuation.definition.comment.iappi}
    - include: '#comments-inline'

  comments-inline:
    comment: Matches TCL style comments and TCL style 'block comment.' Quotes intentional.
    patterns:
      # Commenting out because I'm pretty sure APL doesn't allow if so the if 0 syntax won't help.
    # - name: comment.block.iappi
    #   begin: \s*if\s+0\s+\{
    #   end: \}
    #   captures:
    #     '0': {name: punctuation.definition.comment.iappi}
    # - match: .+((;\s*#).*$\n?) #This might not be valid with the semi-colon.
    - match: .+((;\s*#).*$) #This might not be valid with the semi-colon.
      captures:
        '1': {name: comment.line.semi-pound.iappi}
        '2': {name: punctuation.definition.comment.iappi}
  
  matched-braces:
    comment: Matches a pair of braces anywhere. Since matched-braces includes matched-braces this ultimately works.
    begin: '{'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.iappp}
      # '0': {name: keyword.other.text.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.definition.string.end.iappp}
      # '0': {name: keyword.text.end.iappp}
    name: string.quoted.brace.iappp
    patterns:
    - include: '#escapes'
    - include: '#double-strings'
    - include: '#matched-braces'
    - include: '#comments'

  escapes:
    comment: Escape characters
    match: \\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)
    # match: (\\)(.) # A literal slash and one of ANY character
    name: constant.character.escape.iappp

  double-strings:
    comment: Matches double quoted strings
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.iappp}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.iappp}
    name: string.quoted.double.iappp
    patterns:
      - include: '#escapes'
      - include: '#variables'
      - include: '#embeddeds'
      - include: '#all-strings'
  




################  APL ELEMENTS  ################
# APL elements are defined after global elements

############## APL INNER OBJECTS  ##############
# Inner objects are items like TCL data bindings and brace-lists which can only be contained in other elements and cannot stand next to other elements.
# Elements which can stand on their own are listed below (The requirement that they be nested within a section aside.)
# I.E. The following would not be valid because the tcl databinding element cannot stand on it's own.
# section mysection {
#   tcl {
#     return { "yes", "no"}
#   }
# }


  # Expand this to include quoted strings with spaces and the brace defined arrays.
  brace-lists:
    comment: Matches a brace defined list. In implementation or TCL this technically wouldn't be a string type but in APL it can only contain strings.
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.brace-list.begin.iappp}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.brace-list.end.iappp}
    patterns:
      - include: '#all-strings'

# A failed attempt at a more accurate brace-list
  # brace-list:
  #   comment: Matches a pair of braces defining a list. I.E. { "Yes", "No", "Maybe" }
  #   begin: '{'
  #   beginCaptures:
  #     '0': {name: punctuation.definition.string.begin.iappp}
  #     # '0': {name: keyword.other.text.iappp}
  #   end: '}'
  #   endCaptures:
  #     '0': {name: punctuation.definition.string.end.iappp}
  #     # '0': {name: keyword.text.end.iappp}
  #   patterns:
  #   # - name: meta.name.brace-list.body
  #   #   begin: (?<=\{)
  #   #   end: (?=\})
  #   #   patterns:
  #   #   - include: '#list-elements'
  #   #   - include: '#list-end-elements'
  #   - include: '#list-elements'
  #   - include: '#list-end-elements'
  #   - include: '#comments'
  #   - include: '#illegals'

  # list-elements:
  #   comment: A list element is a bunch of word characters in quotes followed by a comma
  #   match: (\"\w*\",)
  #   name: string.quoted.listelement.iappp
  #   patterns:
  #   - name: meta.text.list-element.appp
  #     #match: (text)\s+(\"[a-z]{2,3}(?:_[A-Z]{2,3})\"\s+)? # The word text
  #     # match: (text)\s+(\"[a-z]{2,3}(?:_[A-Z]{2,3}(?:-[a-zA-Z]{4})?)?\"\s+)?
  #     captures:
  #       '1': {name: keyword.control.text.iappp}
  #       '2': {name: storage.type.text.iappp}

  # list-end-elements:
  #   comment: A list end element is a bunch of word characters in quotes. No comma.
  #   match: (\"\w*\")
  #   name: string.quoted.listelement.iappp

  td-variable-definitions:
    comment: Variable names inside of a text definition
    begin: '^\s*([\w\.]*)'
    beginCaptures:
      '1': {name: variable.parameter.iappp}
    end: '$'
    # endCaptures:
    #   '0': {name: punctuation.section.text.end.iappp}
    patterns:
    - include: '#double-strings'
    - include: '#comments'
    - include: '#brace-list'
    - include: '#illegals'

  text-definitions:
    comment: Defines the text-definition element
    # begin: (?=\btext)
    begin: (?=\btext)
    beginCaptures:
      '1': {name: keyword.control.text.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.section.text.end.iappp}
    patterns:
    - name: meta.text.identifier.appp
      match: (text)\s+(\"[a-z]{2,3}(?:_[A-Z]{2,3})\"\s+)? # The word text
      # match: (text)\s+(\"[a-z]{2,3}(?:_[A-Z]{2,3}(?:-[a-zA-Z]{4})?)?\"\s+)?
      captures:
        '1': {name: keyword.control.text.iappp}
        '2': {name: storage.type.text.iappp}
    - name: meta.text.body.java
      begin: '{'
      end: (?=})
      patterns:
      - include: '#text-body'

  text-body:
    patterns:
    - include: '#comments'
    - include: '#td-variable-definitions'
  

  ######## Properties #########

  defaults:
    comment: The default value presented if no value was previously entered. This can be a string or a Tcl expression.
    patterns:
    - match: (default)\s+("[A-Za-z_][A-Za-z0-9_-]*")
      captures:
        '1': {name: keyword.property.default.iappp}
        '2': {name: storage.type.value}

  displays:
    comment: Gives a hint to the renderer about how this element should be displayed.
    patterns:
    - match: (display)\s+("(?:small|medium|large|xlarge|xxlarge)")
      captures:
        '1': {name: keyword.property.display.iappp}
        '2': {name: storage.type.value}

  validators:
    comment: Tells the renderer what type of data is valid. If input is not valid, the user is returned to the template screen that has a red error message next to the field in question.
    patterns:
    - match: (validator)\s+("(?:FQDN|IpOrFqdn|IpAddress|NonNegativeNumber|Number|PortNumber)")
      captures:
        '1': {name: keyword.property.validator.iappp}
        '2': {name: storage.type.value}

  requireds:
    comment: Makes an object required. Limited usage
    patterns:
    - match: (required)\s*
      captures:
        '1': {name: keyword.property.required.iappp}

  messages:
    comment: Messages display un-editable text to the user.
    begin: (?<=(?:^|\s|\"|\}))(message)\b
    beginCaptures:
      '1': {name: keyword.control.message.iappp}
      # '2': {name: storage.type.message.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\})) # This might be working
    # end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\n)) #Ends when it is followed by another element or a newline
    patterns:
    - name: meta.message.identifier.iappp
      comment: Matches the message keyword and the name of the message object
      # match: (message)\s+([A-Za-z_][A-Za-z0-9_-]*)\b
      match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        # '1': {name: keyword.control.message.iappp}
        '1': {name: storage.type.message.iappp}
    # Then also accept a double quoted string if the message is defined here instead of in the text section.
    - include: '#double-strings'
    - include: '#comments'

  strings:
    comment: Strings are single text boxes which take user input.
    begin: (?<=(?:^|\s|\"|\}))(string)\b
    beginCaptures:
      '1': {name: keyword.control.string.iappp}
      # '2': {name: storage.type.string.iappp}
    # end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\n)) # This is innacurate. It doesn't allow for multi line definitions.
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\})) # This might be working
    # end: (?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define)) # This is super broken but I have no idea why.
    patterns:
    - include: '#validators'
    - include: '#requireds'
    - include: '#displays'
    - include: '#defaults'
    - name: meta.name.string.iappp
      match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        '1': {name: storage.type.string.iappp}
    - include: '#comments'

  passwords:
    comment: Passwords are like strings except instead of displaying the typed text they obfuscate it. Some systems like the built in logging do their best to not log the contents either.
    # begin: (?<=(?:^|\s|\"|\}))(password)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*
    begin: (?<=(?:^|\s|\"|\}))(password)\b
    beginCaptures:
      '1': {name: keyword.control.password.iappp}
      # '2': {name: storage.type.string.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\})) # This might be working
    # end: (?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define)) #Ends when it is followed by another element
    patterns:
    - include: '#requireds'
    - include: '#displays'
    - name: meta.name.string.iappp
      match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        '0': {name: storage.type.password.iappp}

  # So really choice is the word choice, some spaces, the name of the choice object, Optionally some space and a default object, optionally some space and a display object, optionally some space and a definition object {"yes","no"}, optionally a tcl databinding object.
  choices:
    comment: Choices produce a pull down list of selectable options.
    # begin: (?<=(?:^|\s|\"|\}))(choice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    begin: (?<=(?:^|\s|\"|\}))(choice)\b
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.choice.iappp}
      # '2': {name: storage.type.choice.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\}))
    # end: (?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))
    # endCaptures:
    #   '0': {name: storage.section.choice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.name.string.iappp
        match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
        captures:
          '1': {name: storage.type.choice.iappp}
      - name: meta.choice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: '}'
        # end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
        - include: '#double-strings'
        - include: '#comments'

  editchoices:
    comment: Editchoices are like choices except the user can also simply type a choice instead of choosing from those available.
    # begin: (?<=(?:^|\s|\"|\}))(editchoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    begin: (?<=(?:^|\s|\"|\}))(editchoice)\b
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.editchoice.iappp}
      # '2': {name: storage.type.editchoice.iappp}
    # end: '}|(?<=")\n|(?<!\{)\n'
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\}))
    # endCaptures:
    #   '0': {name: storage.section.editchoice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.name.string.iappp
        match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
        captures:
          '1': {name: storage.type.editchoice.iappp}
      - name: meta.editchoice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: '}'
        # end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
          - include: '#double-strings'

  multichoices:
    comment: Multichoices present two lists of options and allow the user to move items between the lists.
    # begin: (?<=(?:^|\s|\"|\}))(multichoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?
    begin: (?<=(?:^|\s|\"|\}))(multichoice)\b
    beginCaptures:
      # '0': {name: keyword.control.choice.iappp}
      '1': {name: keyword.control.multichoice.iappp}
      # '2': {name: storage.type.multichoice.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\}))
    # endCaptures:
    #   '0': {name: storage.section.multichoice.end.iappp}
    patterns:
      - include: '#comments'
      - include: '#displays'
      - include: '#defaults'
      - include: '#tcl-databindings'
      - name: meta.name.string.iappp
        match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
        captures:
          '1': {name: storage.type.multichoice.iappp}
      - name: meta.multichoice.body.iappp # Then we might have a body definition.
        begin: '{' # Which would start with a curly brace
        end: '}'
        # end: (?=}) # And end with a curly brace. This actually says it ends by being followed by a curly brace. Because if there is an end curly brace we'll use it as the end of the whole choice.
        # Choices cannot actually contian code elements. They can contain strings.
        patterns:
          - include: '#double-strings'

  choice-types:
    patterns:
    - include: '#choices'
    - include: '#editchoices'
    - include: '#multichoices'

  tables:
    comment: Tables group other objects together in a way that allows users to add additional lines. They are like rows which can be extended.
    begin: (?<=(?:^|\s|\"|\}))(table)\b
    # begin: \b(table)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.table.iappp}
      # '2': {name: storage.type.table.iappp}
      # '3': {name: storage.modifier.iappp}
      # '4': {name: storage.modifier.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\}))
    # end: '}'
    # endCaptures:'
        #   # '0': {name: storage.section.table.end.iappp} # Should be punctuation. Using storage to cause highlighting.
        #   '0': {name: punctuation.table.end.iappp}'
    patterns:
    - name: meta.name.string.iappp
      match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        '1': {name: storage.type.table.iappp}
    - name: meta.table.body.iappp
      begin: '{'
      end: '}'
      # end: (?=})
      patterns:
      - include: '#comments'
      - include: '#strings'
      - include: '#passwords'
      - include: '#choice-types'
      - include: '#optionals'
      # Cannot include rows or messages

  # I'm not sure if rows will work with choice types or not.
  rows:
    comment: Rows cause objects to be displayed side by side instead of on top of one another.
    begin: (?<=(?:^|\s|\"|\}))(row)\b
    # begin: \b(row)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)
    beginCaptures:
      '1': {name: keyword.control.row.iappp}
      # '2': {name: storage.type.table.iappp}
      # '3': {name: storage.modifier.iappp}
      # '4': {name: storage.modifier.iappp}
    end: ((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?=\}))
    # end: '}'
    # endCaptures:
    #   # '0': {name: storage.section.table.end.iappp} # Should be punctuation. Using storage to cause highlighting.
    #   '0': {name: punctuation.row.end.iappp}
    patterns:
    - name: meta.name.string.iappp
      match: \b([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        '1': {name: storage.type.row.iappp}
    - name: meta.table.body.iappp
      begin: '{'
      end: '}'
      # end: (?=})
      patterns:
      - include: '#comments'
      - include: '#strings'
      - include: '#passwords'
      - include: '#choice-types'
      # Cannot include rows or messages

  sections:
    comment: Defines a section element
    begin: (?=\bsection)
    beginCaptures:
      '1': {name: keyword.control.section.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.section.section.end.iappp}
    patterns:
    - name: meta.section.identifier.appp
      match: (section)\s+([A-Za-z_][A-Za-z0-9_-]*)\b
      captures:
        '1': {name: keyword.control.section.iappp}
        '2': {name: storage.type.section.iappp}
    - name: meta.section.body.java
      begin: '{'
      end: (?=})
      patterns:
      - include: '#section-body'

  section-body:
    patterns:
    - include: '#comments'
    - include: '#tcl-databindings'
    - include: '#matched-braces'
    - include: '#sections'
    - include: '#optionals'
    - include: '#messages'
    - include: '#strings'
    - include: '#passwords'
    - include: '#choice-types'
    - include: '#tables'
    - include: '#rows'
    - include: '#illegals'

# name: string.quoted.brace.iappp
  optionals:
    comment: Defines an optional element
    begin: (?=\boptional)
    beginCaptures:
      '1': {name: keyword.control.optional.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.section.optional.end.iappp}
    patterns:
    - name: meta.optional.identifier.appp
      match: \b(optional)\b
      captures:
        '1': {name: keyword.control.optional.iappp}
        # '2': {name: storage.type.optional.iappp}
    - name: punctuation.optional.condition.iappp
    # - name: string.quoted.punctuation.optional.condition.iappp
      comment: The conditional statement which controls wither or not the contents of the optional are displayed.
      begin: \(
      beginCaptures:
      #   # '0': {name: invalid.illegal.unrecognized.iappp}
      #   # '0': {name: punctuation.definition.optional-condition.begin.iappp}
        '0': {name: punctuation.optional.condition.begin.iappp}
      #   # '0': {name: keyword.text.begin.iappp}
      end: \)
      endCaptures:
      #   '0': {name: invalid.illegal.unrecognized.iappp}
      #   # '0': {name: punctuation.definition.optional-condition.end.iappp}
        '0': {name: punctuation.optional.condition.end.iappp}
      #   # '0': {name: keyword.text.end.iappp}
      # patterns:
      # - name: meta.optional.condition.definition.iappp
      #   match: .*
      #   captures:
      #     '0': {name: keyword.control.optional.condition}
    - name: meta.optional.body.iappp
      begin: '{'
      # beginCaptures:
      #   '0': {name: invalid.illegal.unrecognized.iappp}
      end: (?=})
      patterns:
      - include: '#optional-body'
      
  matched-braces:
    comment: Matches a pair of braces anywhere. Since matched-braces includes matched-braces this ultimately works.
    begin: '{'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.iappp}
      # '0': {name: keyword.other.text.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.definition.string.end.iappp}
      # '0': {name: keyword.text.end.iappp}
    name: string.quoted.brace.iappp

  optional-body:
    comment: The main contents of the optional
    patterns:
    - include: '#comments'
    - include: '#tcl-databindings'
    - include: '#matched-braces'
    - include: '#sections'
    - include: '#optionals'
    - include: '#messages'
    - include: '#strings'
    - include: '#passwords'
    - include: '#choice-types'
    - include: '#tables'
    - include: '#rows'
    - include: '#illegals'

  tcl-databindings:
    comment: Defines the tcl data binding section which can be used to populate list type objects such as choices
    begin: (?=\btcl)
    beginCaptures:
      # '0': {name: punctuation.tcl.begin.iappp}
      '1': {name: keyword.control.tcl.iappp}
    end: '}'
    endCaptures:
      '0': {name: punctuation.tcl.end.iappp}
    patterns:
    - name: meta.tcl.identifier.iappp
      match: (tcl)\b
      captures:
        '1': {name: keyword.control.tcl.iappp}
    - name: meta.tcl.body.iappp
      begin: '{'
      end: (?=})
      patterns:
      - include: '#comments'
      - include: 'source.f5.iapp.impl' # You can include a separate language by specifying it's scope name. Note the missing initial pound.

  # class:
  #   name: meta.class.java
  #   begin: (?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)
  #   end: '}'
  #   endCaptures:
  #     '0': {name: punctuation.section.class.end.java}
  #   patterns:
  #   - include: '#storage-modifiers'
  #   - include: '#comments'
  #   - name: meta.class.identifier.java
  #     match: (class|(?:@)?interface|enum)\s+(\w+)
  #     captures:
  #       '1': {name: storage.modifier.java}
  #       '2': {name: entity.name.type.class.java}
  #   - name: meta.definition.class.inherited.classes.java
  #     begin: extends
  #     beginCaptures:
  #       '0': {name: storage.modifier.extends.java}
  #     end: (?={|implements)
  #     patterns:
  #     - include: '#object-types-inherited'
  #     - include: '#comments'
  #   - name: meta.definition.class.implemented.interfaces.java
  #     begin: (implements)\s
  #     beginCaptures:
  #       '1': {name: storage.modifier.implements.java}
  #     end: (?=\s*extends|\{)
  #     patterns:
  #     - include: '#object-types-inherited'
  #     - include: '#comments'
  #   - name: meta.class.body.java
  #     begin: '{'
  #     end: (?=})
  #     patterns:
  #     - include: '#class-body'

  # class-body:
  #   patterns:
  #   - include: '#comments'
  #   - include: '#class'
  #   - include: '#enums'
  #   - include: '#methods'
  #   - include: '#annotations'
  #   - include: '#storage-modifiers'
  #   - include: '#code'

  # Globally invalid/incorrect stuff.
  # Need to figure out how to get mismatched stuff added here.

  # Everythhing that doesn't match something else is wrong. This should be the very last element
  illegals:
    name: invalid.illegal.unrecognized.iappp
    match: '[^\s}]'