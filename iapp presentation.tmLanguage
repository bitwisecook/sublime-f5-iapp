<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>iappp</string>
		<string>iapp_pres</string>
		<string>iapp_presentation</string>
	</array>
	<key>foldingEndMarker</key>
	<string>^\s*\}</string>
	<key>foldingStartMarker</key>
	<string>\{\s*$</string>
	<key>name</key>
	<string>F5 iApp Presentation</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.iappp</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(include)\s+("?[A-Za-z_][A-Za-z0-9_-]*)\b</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#top-level-objects</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#unmatched</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#illegal</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all-strings</key>
		<dict>
			<key>comment</key>
			<string>All string types. Bare strings, double quoted strings, brace quoted strings, etc.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#double-strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brace-lists</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bare-strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>brace-lists</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.brace-list.begin.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Matches a brace defined list. In implementation or TCL this technically wouldn't be a string type but in APL it can only contain strings.</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.brace-list.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#all-strings</string>
				</dict>
			</array>
		</dict>
		<key>choice-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#choices</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#editchoices</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#multichoices</string>
				</dict>
			</array>
		</dict>
		<key>choices</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(choice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.choice.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.choice.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Choices produce a pull down list of selectable options.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=}))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.section.choice.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#displays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#defaults</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tcl-databindings</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.choice.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#double-strings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>comment</key>
			<string>Matches TCL style comments and empty TCL style 'block comment.' Quotes intentional.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.pound.iappi</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.iappi</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*((#).*$\n?)</string>
					<key>name</key>
					<string>meta.comment.standalone</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
			</array>
		</dict>
		<key>comments-inline</key>
		<dict>
			<key>comment</key>
			<string>Matches TCL style comments and TCL style 'block comment.' Quotes intentional.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.semi-pound.iappi</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.iappi</string>
						</dict>
					</dict>
					<key>match</key>
					<string>.+((;\s*#).*$\n?)</string>
				</dict>
			</array>
		</dict>
		<key>defaults</key>
		<dict>
			<key>comment</key>
			<string>The default value presented if no value was previously entered. This can be a string or a Tcl expression.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.default.iappp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.value</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(default)\s+("[A-Za-z_][A-Za-z0-9_-]*")</string>
				</dict>
			</array>
		</dict>
		<key>defines</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(define)\s+(?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.define.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.define.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Comments allow users to create their own types.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=}))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#passwords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#choices</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#editchoices</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#multichoices</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#rows</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#messages</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#optionals</string>
				</dict>
			</array>
		</dict>
		<key>displays</key>
		<dict>
			<key>comment</key>
			<string>Gives a hint to the renderer about how this element should be displayed.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.display.iappp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.value</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(display)\s+("(?:small|medium|large|xlarge|xxlarge)")</string>
				</dict>
			</array>
		</dict>
		<key>double-strings</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Matches double quoted strings</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.iappp</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.iappp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escapes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#embeddeds</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all-strings</string>
				</dict>
			</array>
		</dict>
		<key>editchoices</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(editchoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.editchoice.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.editchoice.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Editchoices are like choices except the user can also simply type a choice instead of choosing from those available.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=}))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.section.editchoice.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#displays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#defaults</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tcl-databindings</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.editchoice.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#double-strings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>embeddeds</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.embedded.begin.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Matches an embeded command</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.embedded.end.iappp</string>
				</dict>
			</dict>
			<key>name</key>
			<string>source.iapp.embedded</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#embeddeds</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#source.iapp</string>
				</dict>
			</array>
		</dict>
		<key>escapes</key>
		<dict>
			<key>match</key>
			<string>\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)</string>
			<key>name</key>
			<string>constant.character.escape.iappp</string>
		</dict>
		<key>illegal</key>
		<dict>
			<key>match</key>
			<string>[^\s}]</string>
			<key>name</key>
			<string>invalid.illegal.unrecognized.iappp</string>
		</dict>
		<key>messages</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(message)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.message.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.message.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Messages display un-editable text to the user.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=\n))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#double-strings</string>
				</dict>
			</array>
		</dict>
		<key>multichoices</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(multichoice)\s+([A-Za-z_][A-Za-z0-9_-]*)((?=\s*(display|default|tcl)))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.multichoice.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.multichoice.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Multichoices present two lists of options and allow the user to move items between the lists.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=}))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.section.multichoice.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#displays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#defaults</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tcl-databindings</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.multichoice.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#double-strings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>optionals</key>
		<dict>
			<key>begin</key>
			<string>\b(optional)\s+(\(.*\))\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.section.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.section.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Optionals cause items to not be displayed unless the defined criteria are met. This defines the optional element except when it's a top level object. I.E. when it's contained within a section (or something else which is contained within a section.)</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.section.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#passwords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#choices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#editchoices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#multichoices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#tables</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#rows</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#messages</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#optionals</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#defines</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>passwords</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(password)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.string.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Passwords are like strings except instead of displaying the typed text they obfuscate it. Some systems like the built in logging do their best to not log the contents either.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=\n))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#requireds</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#displays</string>
				</dict>
			</array>
		</dict>
		<key>regexps</key>
		<dict>
			<key>begin</key>
			<string>(?=\S)(?![\n;\]])</string>
			<key>comment</key>
			<string>matches a single word, named as a regexp, then swallows the rest of the command</string>
			<key>end</key>
			<string>(?=[\n;\]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[^ \t\n;])</string>
					<key>end</key>
					<string>(?=[ \t\n;])</string>
					<key>name</key>
					<string>string.regexp.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#braces</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#bare-strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[ \t]</string>
					<key>comment</key>
					<string>swallow the rest of the command</string>
					<key>end</key>
					<string>(?=[\n;\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#embeddeds</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#braces</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>requireds</key>
		<dict>
			<key>comment</key>
			<string>Makes an object required. Limited usage</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.required.iappp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(required)\s*</string>
				</dict>
			</array>
		</dict>
		<key>rows</key>
		<dict>
			<key>begin</key>
			<string>\b(row)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.table.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.table.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Rows cause objects to be displayed side by side instead of on top of one another.</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.table.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.table.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#passwords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#choice-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>sections</key>
		<dict>
			<key>begin</key>
			<string>\b(section)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.section.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.section.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Sections group other elements together. They are valid only as top level items or within an optional definition if it is also at the top level. They cannot be nested inside of any other element including themselves. Almost all other elements must be nested within a section.</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.section.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#passwords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#choices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#editchoices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#multichoices</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#tables</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#rows</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#messages</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#optionals</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#defines</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=(?:^|\s|\"|\}))(string)\s+([A-Za-z_][A-Za-z0-9_-]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.string.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.string.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Strings are single text boxes which take user input.</string>
			<key>end</key>
			<string>((?=(string|password|choice|editchoice|multichoice|table|row|message|section|optional|text|include|define))|(?&lt;=\n))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#validators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#requireds</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#displays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#defaults</string>
				</dict>
			</array>
		</dict>
		<key>tables</key>
		<dict>
			<key>begin</key>
			<string>\b(table)\s+([A-Za-z_][A-Za-z0-9_-]*)\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.table.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.table.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Tables group other objects together in a way that allows users to add additional lines. They are like rows which can be extended.</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.table.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.table.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#passwords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#choice-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>tcl-databindings</key>
		<dict>
			<key>begin</key>
			<string>\b(tcl)\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.tcl.iappp</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.tcl.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.tcl.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#all-strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#embeddeds</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.iapp_impl</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>text-definition</key>
		<dict>
			<key>begin</key>
			<string>^\s*(text)\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.other.text.iappp</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.text.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.text.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#text-definition-variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#all-strings</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>text-definition-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyord.control.iappp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(^\s*([A-Za-z_][A-Za-z0-9_-]*))(?=\s)</string>
					<key>name</key>
					<string>variable.language.iappp</string>
				</dict>
			</array>
		</dict>
		<key>top-level-objects</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#top-optionals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sections</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#text-definition</string>
				</dict>
			</array>
		</dict>
		<key>top-optionals</key>
		<dict>
			<key>begin</key>
			<string>\b(optional)\s+(\(.*\))\s+(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.optional.iappp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.optional.iappp</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Optionals cause items to not be displayed unless the defined criteria are met. This defines the optional element when it's a top level object. I.E. when it's wrapped around a section</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.optional.end.iappp</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.optional.body.iappp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#sections</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>unmatched</key>
		<dict>
			<key>match</key>
			<string>^ *- |,(?= *$| +#)</string>
		</dict>
		<key>validators</key>
		<dict>
			<key>comment</key>
			<string>Tells the renderer what type of data is valid. If input is not valid, the user is returned to the template screen that has a red error message next to the field in question.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.validator.iappp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.value</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(validator)\s+("(?:FQDN|IpOrFqdn|IpAddress|NonNegativeNumber|Number|PortNumber)")</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.iapp.presentation</string>
	<key>uuid</key>
	<string>b6965f69-91d4-4b71-a789-f5531cd568a4</string>
</dict>
</plist>
