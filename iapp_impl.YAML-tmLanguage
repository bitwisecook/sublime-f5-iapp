# [PackageDev] target_format: plist, ext: tmLanguage
---
name: F5 iApp Implementation
scopeName: source.iapp_impl
fileTypes: [iappi, iapp_impl]
uuid: e998b591-e630-4583-86bd-b5714d50dd79

firstLineMatch: '^package require iapp '
foldingEndMarker: ^\s*\}
foldingStartMarker: \{\s*$
patterns:
- captures:
    '1': {name: keyword.control.iapp}
  match: (?<=^|[\[{;])\s*(if|while|for|catch|return|break|continue|switch|exit|foreach)\b
- captures:
    '1': {name: keyword.control.iapp}
  match: (?<=^|})\s*(then|elseif|else)\b
- captures:
    '1': {name: keyword.other.iapp}
    '2': {name: entity.name.function.iapp}
  match: ^\s*(proc)\s+([^\s]+)
- captures:
    '1': {name: keyword.other.iapp}
  match: (?<=^|[\[{;])\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait)\b
- captures:
    '1': {name: keyword.other.iapp}
  match: (?<=^|[\[{;])\s*(tmsh::(create|modify|delete))\b
- captures:
    '1': {name: keyword.other.iapp}
  match: (?<=^|[\[{;])\s*(iapp::(is|conf|debug|tmsh_create|substa|template))\b
- captures:
    '1': {name: variable.language.iapp}
  match: (\$tmsh::app_name)
- captures:
    '1': {name: variable.parameter.iapp}
  match: ((\$|\[set\\s+)?::([A-Za-z_][A-Za-z0-9_-]*[^_]|[A-Za-z][A-Za-z0-9]*)__[A-Za-z][A-Za-z0-9_-]*)
- begin: (?<=^|[\[{;])\s*(regexp|regsub)\b\s*
  beginCaptures:
    '1': {name: keyword.other.iapp}
  comment: special-case regexp/regsub keyword in order to handle the expression
  end: '[\n;\]]'
  patterns:
  - {match: '\\(?:.|\n)', name: constant.character.escape.iapp}
  - {comment: switch for regexp, match: -\w+\s*}
  - applyEndPatternLast: 1
    begin: --\s*
    comment: end of switches
    end: ''
    patterns:
    - {include: '#regexp'}
  - {include: '#regexp'}
- {include: '#escape'}
- {include: '#variable'}
- begin: '"'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.iapp}
  end: '"'
  endCaptures:
    '0': {name: punctuation.definition.string.end.iapp}
  name: string.quoted.double.iapp
  patterns:
  - {include: '#escape'}
  - {include: '#variable'}
  - {include: '#embedded'}
repository:
  bare-string:
    begin: (?:^|(?<=\s))"
    comment: matches a single quote-enclosed word without scoping
    end: '"([^\s\]]*)'
    endCaptures:
      '1': {name: invalid.illegal.iapp}
    patterns:
    - {include: '#escape'}
    - {include: '#variable'}
  braces:
    begin: (?:^|(?<=\s))\{
    comment: matches a single brace-enclosed word
    end: \}([^\s\]]*)
    endCaptures:
      '1': {name: invalid.illegal.iapp}
    patterns:
    - {match: '\\[{}\n]', name: constant.character.escape.iapp}
    - {include: '#inner-braces'}
  embedded:
    begin: \[
    beginCaptures:
      '0': {name: punctuation.section.embedded.begin.iapp}
    end: \]
    endCaptures:
      '0': {name: punctuation.section.embedded.end.iapp}
    name: source.iapp.embedded
    patterns:
    - {include: source.iapp}
  escape: {match: '\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)', name: constant.character.escape.iapp}
  inner-braces:
    begin: \{
    comment: matches a nested brace in a brace-enclosed word
    end: \}
    patterns:
    - {match: '\\[{}\n]', name: constant.character.escape.iapp}
    - {include: '#inner-braces'}
  regexp:
    begin: (?=\S)(?![\n;\]])
    comment: matches a single word, named as a regexp, then swallows the rest of the
      command
    end: (?=[\n;\]])
    patterns:
    - begin: (?=[^ \t\n;])
      end: (?=[ \t\n;])
      name: string.regexp.iapp
      patterns:
      - {include: '#braces'}
      - {include: '#bare-string'}
      - {include: '#escape'}
      - {include: '#variable'}
    - begin: '[ \t]'
      comment: swallow the rest of the command
      end: (?=[\n;\]])
      patterns:
      - {include: '#variable'}
      - {include: '#embedded'}
      - {include: '#escape'}
      - {include: '#braces'}
      - {include: '#string'}
  string:
    applyEndPatternLast: 1
    begin: (?:^|(?<=\s))(?=")
    comment: matches a single quote-enclosed word with scoping
    end: ''
    name: string.quoted.double.iapp
    patterns:
    - {include: '#bare-string'}
  variable:
    captures:
      '1': {name: punctuation.definition.variable.iapp}
    match: (\$)((?:[a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})
    name: variable.other.iapp
